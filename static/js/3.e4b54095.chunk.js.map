{"version":3,"sources":["Components/ContactForm/ContactForm.module.css","Components/Filter/Filter.module.css","Components/ContactList/ContactList.module.css","Components/ContactForm/ContactForm.jsx","Components/Filter/Filter.jsx","../node_modules/uuid/dist/esm-browser/rng.js","redux/contacts/contactsSelectors.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","redux/contacts/contacts-operations.js","Components/ContactList/ContactList.jsx","views/Contacts.js"],"names":["module","exports","ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","target","value","action","e","preventDefault","className","s","contactForm","contactForm__label","htmlFor","type","placeholder","pattern","title","required","onChange","Button","Filter","getRandomValues","dispatch","useDispatch","filter__input","contactsActions","filter","filteredContacts","createSelector","state","contacts","items","contact","toLowerCase","includes","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","i","push","toString","substr","stringify","arr","offset","arguments","length","undefined","TypeError","v4","options","buf","rnds","random","axios","defaults","baseURL","ContactList","useSelector","contactsSelectors","map","cont","contactList__item","contactList__name","contactList__number","variant","onClick","id","actions","deleteContactRequest","delete","then","deleteContactSuccess","catch","error","deleteContactError","Contacts","useEffect","fetchContactRequest","get","data","fetchContactSuccess","fetchContactError","container__label","item","text","newContact","uuidv4","addContactRequest","post","addContactSuccess","container__contacts"],"mappings":"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","file":"static/js/3.e4b54095.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactForm\":\"ContactForm_contactForm__26GaD\",\"contactForm__label\":\"ContactForm_contactForm__label__1vYgt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter__input\":\"Filter_filter__input__-7nL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList__item\":\"ContactList_contactList__item__2NIMG\",\"contactList__name\":\"ContactList_contactList__name__101_V\",\"contactList__number\":\"ContactList_contactList__number__12qXF\"};","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport s from './ContactForm.module.css';\n\nconst ContactForm = ({ onSubmit }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = ({ target }) => {\n    if (target.name === 'name') {\n      setName(target.value);\n    }\n    if (target.name === 'number') {\n      setNumber(target.value);\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <div>\n      <form action=\"\" onSubmit={handleSubmit} className={s.contactForm}>\n        <label className={s.contactForm__label} htmlFor=\"\">\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"John Snow\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n        </label>\n        <label className={s.contactForm__label} htmlFor=\"\">\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            placeholder=\"+38(093)9995040\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n        </label>\n        <Button type=\"submit\">Add contact</Button>\n      </form>\n    </div>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  phone: PropTypes.number,\n};\n\nexport { ContactForm };\n","import s from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\nimport contactsActions from './../../redux/contacts/contacts-actions';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  return (\n    <>\n      <label htmlFor=\"\">\n        Find contacts by name\n        <input\n          className={s.filter__input}\n          type=\"text\"\n          placeholder=\"find by name..\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={e => dispatch(contactsActions.filter(e.target.value))}\n        />\n      </label>\n    </>\n  );\n}\n\n// const mapDispatchToProps = dispatch => ({\n//   onChange: e => dispatch(contactsActions.filter(e.target.value)),\n// });\n\n// export default connect(null, mapDispatchToProps)(Filter);\nexport default Filter;\n","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import { createSelector } from 'reselect';\r\n\r\nexport const allContacts = state => state.contacts.items;\r\nexport const filterValue = state => state.contacts.filter;\r\n\r\nexport const filteredContacts = createSelector(\r\n  [allContacts, filterValue],\r\n  (items, filter) => {\r\n    return items.filter(contact => contact.name.toLowerCase().includes(filter));\r\n  },\r\n);\r\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","// import { createAction, createAsyncThunk, createSlice } from '@reduxjs/toolkit';\r\nimport actions from './contacts-actions';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport axios from 'axios';\r\n// axios.defaults.baseURL = 'http://localhost:3000';\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nexport const fetchContacts = () => dispatch => {\r\n  dispatch(actions.fetchContactRequest);\r\n\r\n  axios\r\n    .get(`/contacts`)\r\n    .then(({ data }) => dispatch(actions.fetchContactSuccess(data)))\r\n    .catch(error => dispatch(actions.fetchContactError(error)));\r\n};\r\n\r\nexport const addContact = text => dispatch => {\r\n  const newContact = {\r\n    id: uuidv4(),\r\n    name: text.name,\r\n    number: text.number,\r\n  };\r\n\r\n  dispatch(actions.addContactRequest);\r\n\r\n  axios\r\n    .post(`/contacts`, newContact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(actions.deleteContactRequest);\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(id)))\r\n    .catch(error => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\n// export const fetchContacts = createAsyncThunk(\r\n//   'contacts/fetchContacts',\r\n//   async () => {\r\n//     const contacts = await contactsApi.fetchContacts();\r\n//     return contacts;\r\n//   },\r\n// );\r\n\r\n// export const addNewContact = createAsyncThunk(\r\n//   'contacts/addContact',\r\n//   async contact => {\r\n//     const contacts = await contactsApi.addContacts(contact);\r\n//     return contacts;\r\n//   },\r\n// );\r\n\r\n// export const deleteContact = createAsyncThunk(\r\n//   'contacts/deleteContacts',\r\n//   async id => {\r\n//     try {\r\n//       await contactsApi.deleteContacts(id);\r\n//       return id;\r\n//     } catch (error) {\r\n//       return error;\r\n//     }\r\n//   },\r\n// );\r\n\r\n// export default {\r\n//   addContact,\r\n// };\r\n","// import { useEffect } from 'react';\n// import * as contactsApi from \"./../../contacts-api\"\nimport * as contactsSelectors from '../../redux/contacts/contactsSelectors';\n\nimport { useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Button } from 'react-bootstrap';\nimport s from './ContactList.module.css';\nimport { deleteContact } from './../../redux/contacts/contacts-operations';\nimport { useDispatch } from 'react-redux';\n\nfunction ContactList() {\n  const contacts = useSelector(contactsSelectors.filteredContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      {contacts.length > 0 && (\n        <ul>\n          {contacts.map(cont => {\n            return (\n              <li className={s.contactList__item} key={cont.id}>\n                <span className={s.contactList__name}>{cont.name}</span>\n                <span className={s.contactList__number}>{cont.number}</span>\n                <Button\n                  variant=\"danger\"\n                  onClick={() => dispatch(deleteContact(cont.id))}\n                >\n                  Delete\n                </Button>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </div>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({ id: PropTypes.string.isRequired }),\n  ),\n};\n\nexport { ContactList };\n","import { ContactForm } from './../Components/ContactForm/ContactForm';\r\nimport Filter from './../Components/Filter/Filter';\r\nimport { ContactList } from './../Components/ContactList/ContactList';\r\nimport ReactNotifications from 'react-notifications-component';\r\nimport s from './../Components/Container/Container.module.css';\r\nimport { useEffect } from 'react';\r\nimport {\r\n  fetchContacts,\r\n  addContact,\r\n} from './../redux/contacts/contacts-operations';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst Contacts = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ReactNotifications />\r\n      <>\r\n        <h1 className={s.container__label}>Phonebook</h1>\r\n        <ContactForm onSubmit={item => dispatch(addContact(item))} />\r\n\r\n        <h2 className={s.container__contacts}>Contacts</h2>\r\n\r\n        <Filter />\r\n        <ContactList />\r\n      </>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n"],"sourceRoot":""}